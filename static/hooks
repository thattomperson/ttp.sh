#!/usr/bin/env node

const https = require('https');
const path = require('path');
const fs = require('fs');
const util = require('util');
const spawn = require('child_process').spawnSync;
const mkdir = util.promisify(fs.mkdir);
const writeFile = util.promisify(fs.writeFile);
const chmod = util.promisify(fs.chmod);

const gistId = '7a8127ac306bb2e58c24ba16a521b621';

function get(url) {
  let content = '';
  return new Promise((resolve, reject) => {
    https.get(
      url,
      {
        headers: {
          'User-Agent': 'node-git-hooks-downloader',
        },
      },
      (res) => {
        res.on('data', (data) => {
          content += data;
        });

        res.on('close', () => {
          resolve(content);
        });

        res.on('error', reject);
      }
    );
  });
}

async function getContent({ truncated, content, raw_url }) {
  return truncated ? await get(raw_url) : content;
}

async function write(filepath, file) {
  const content = await getContent(file);
  return writeFile(filepath, content);
}

async function writeAliases(aliases) {
  const content = await getContent(aliases);

  const lines = content.split('\n');
  lines.map(line => {
    const [name, body] = line.split(/=(.*)/s).map(p => p.trim());
    console.log(`\tAdding ${name} alias`);
    return exec('git', 'config', '--replace-all', `alias.${name}`, body);
  })
}

function exec(command, ...args) {
  spawn(command, args)
}

function groupHooks(files) {
  const groups = {
    hooks: {},
    ungrouped: {},
  };

  Object.values(files).forEach((file) => {
    let matches = /\[(.+?)\]-(.*)/.exec(file.filename);
    if (matches) {
      groups.hooks[matches[1]] = groups.hooks[matches[1]] || {};
      groups.hooks[matches[1]][matches[2]] = file;
    } else if (file.filename === 'aliases') {
      groups.aliases = file
    } else {
      groups.ungrouped[file.filename] = file;
    }
  });

  return groups;
}

async function writeAll(groups) {
  console.log("Writing hooks")
  await Promise.all(
    Object.keys(groups.hooks).map(async (hook) => {
      await Promise.all(
        Object.keys(groups.hooks[hook]).map(async (filename) => {
          console.log(`\tWriting ${hook} ${filename}`)
          const folder = path.join('.git', 'hooks', 'hooks.d', hook);
          const filepath = path.join(folder, filename);

          await mkdir(folder, { recursive: true });
          await write(filepath, groups.hooks[hook][filename]);
          await chmod(filepath, '775');
        })
      );

      const filepath = path.join('.git', 'hooks', hook);
      const content = Object.keys(groups.hooks[hook]).reduce(
        (contents, filename) => {
          const folder = path.join('.git', 'hooks', 'hooks.d', hook);
          const filepath = path.join(folder, filename);

          return `${contents}\n${filepath}\n`;
        },
        '#!/usr/bin/env sh\nset -e\n\n'
      );

      await writeFile(filepath, content);
      await chmod(filepath, '775');
    })
  );

  console.log('Writing aliases');
  await writeAliases(groups.aliases)

  console.log('Writing additional files');
  await Promise.all(
    Object.keys(groups.ungrouped).map(async (filename) => {
      console.log(`\tWriting ${filename}`)
      const folder = path.join('.git');
      const filepath = path.join(folder, filename);


      await mkdir(folder, { recursive: true });
      await write(filepath, groups.ungrouped[filename]);
    })
  );
}

get(`https://api.github.com/gists/${gistId}`)
  .then((content) => JSON.parse(content))
  .then((res) => res.files)
  .then(groupHooks)
  .then(writeAll);
